{"name": "Заказы пользователя отображаются на странице Ленте заказов", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3eabdda9d0ab082f79dee3a2d5c6bec5\")>\ngenerate_random_user = {'email': 'patricia76@example.org', 'name': 'Sara Bailey', 'password': '8390834647'}\n\n    @allure.step(\"Логин пользователя на сайте\")\n    @pytest.fixture()\n    def get_authorized(driver, generate_random_user):\n        HeaderPage(driver).click_my_account()\n>       LoginPage(driver).login_user(generate_random_user)\n\nconftest.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\login_page.py:38: in login_user\n    self.wait_for_url_change(old_url)\npages\\base_page.py:58: in wait_for_url_change\n    return WebDriverWait(self.driver, 15).until(expected_conditions.url_changes(old_url))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3eabdda9d0ab082f79dee3a2d5c6bec5\")>, method = <function url_changes.<locals>._predicate at 0x000001BCDAFCF370>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "description": "заказы пользователя из раздела «История заказов» отображаются на странице «Лента заказов»", "parameters": [{"name": "driver", "value": "'chrome'"}], "start": 1719837341711, "stop": 1719837341711, "uuid": "234dcf8f-5155-4b7b-b029-d208a03d3e61", "historyId": "a717248cd6d0b549074cb34db39d668a", "testCaseId": "a4972676177b16eb7db5b5a311d735b9", "fullName": "tests.test_feed.TestFeed#test_user_order_present_in_feed", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_feed"}, {"name": "subSuite", "value": "TestFeed"}, {"name": "host", "value": "XPMEPODW0067"}, {"name": "thread", "value": "4580-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_feed"}]}